## 
> * github / coding
> * 不用 .class
> * 看 PSR 文档

PSR-0 autoload
PSR-1 基本代码规范
PSR-2 代码风格
PSR-3 日志接口规范 monolog
PSR-4 PHP5.4 之后的 autoload
PSR-5 是 PHPDOC 规范
PSR-6 是 缓存接口规范 
PSR-7 是 HTTP消息接口规范  = =
	PHP 最有名的 http client 组件 
	叫做 guzzle 用的是 psr7 规范

Elasticsearch / Solr 

etcd / zk

如果数据库发生死锁如何找到
突然间内存占用过高，如何排查
cache-control
http / https 的同源策略，跨域

spl 

orm 模型 / callStatic 实现 orm 模型

get_called_class	后期静态绑定（"Late Static Binding"）类的名称
call_user_func	回调函数

__toString(): echo 对象的时候会自动调用 __toString(), 若未定义将报错
serialize() 会产生一些比如长度等的无用信息

PHP_EOL	换行，提高代码的可移植性

组合 与 继承

组合 总体优点大于缺点，虽然增加的代码量，但减少了耦合度
优先考虑使用组合来提高代码的可重用性

底层代码多用组合，顶层/业务层代码多用继承
底层用组合可以提高效率，避免对象臃肿
顶层代码用继承可以提高灵活性，让业务层更加灵活

耦合指的是一个软件结构内部各个模块之间的互联程度，也就是各个模块之间的依赖关系

使用 final 修饰禁止被继承的类，防止重要方法被重写，也能减少继承，优化代码

MySQL CURD （增删改查）操作	使用继承还是组合？

traits
是除了 extends implements 外的另一种扩展对象的方式
traits 既可以使使用单继承模式的语言获得多继承的灵活，又可以避免多继承带来的种种问题

多态：同一类型，不同结果，类型转换不属于多态
同一类型，调用同一个方法，返回不同结果
接口可以实现多态，继承实现的不属于多态

关于"PHP没有多态"
PHP 作为一门脚本语言，本身就是多态的，所以在语言级别上，不谈 PHP 的多态


1.4 	page 41




php7 还是主要优化了 zval 从原来的32字节 缩小到16个字节 
php7 是优化了 cpu高速缓存的命中率

elementary os